// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.3
// source: http.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HTTPOverGRPCServiceClient is the client API for HTTPOverGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPOverGRPCServiceClient interface {
	HTTP(ctx context.Context, opts ...grpc.CallOption) (HTTPOverGRPCService_HTTPClient, error)
}

type hTTPOverGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPOverGRPCServiceClient(cc grpc.ClientConnInterface) HTTPOverGRPCServiceClient {
	return &hTTPOverGRPCServiceClient{cc}
}

func (c *hTTPOverGRPCServiceClient) HTTP(ctx context.Context, opts ...grpc.CallOption) (HTTPOverGRPCService_HTTPClient, error) {
	stream, err := c.cc.NewStream(ctx, &HTTPOverGRPCService_ServiceDesc.Streams[0], "/com.github.jille.httpovergrpc.HTTPOverGRPCService/HTTP", opts...)
	if err != nil {
		return nil, err
	}
	x := &hTTPOverGRPCServiceHTTPClient{stream}
	return x, nil
}

type HTTPOverGRPCService_HTTPClient interface {
	Send(*HTTPRequest) error
	Recv() (*HTTPResponse, error)
	grpc.ClientStream
}

type hTTPOverGRPCServiceHTTPClient struct {
	grpc.ClientStream
}

func (x *hTTPOverGRPCServiceHTTPClient) Send(m *HTTPRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hTTPOverGRPCServiceHTTPClient) Recv() (*HTTPResponse, error) {
	m := new(HTTPResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HTTPOverGRPCServiceServer is the server API for HTTPOverGRPCService service.
// All implementations should embed UnimplementedHTTPOverGRPCServiceServer
// for forward compatibility
type HTTPOverGRPCServiceServer interface {
	HTTP(HTTPOverGRPCService_HTTPServer) error
}

// UnimplementedHTTPOverGRPCServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHTTPOverGRPCServiceServer struct {
}

func (UnimplementedHTTPOverGRPCServiceServer) HTTP(HTTPOverGRPCService_HTTPServer) error {
	return status.Errorf(codes.Unimplemented, "method HTTP not implemented")
}

// UnsafeHTTPOverGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPOverGRPCServiceServer will
// result in compilation errors.
type UnsafeHTTPOverGRPCServiceServer interface {
	mustEmbedUnimplementedHTTPOverGRPCServiceServer()
}

func RegisterHTTPOverGRPCServiceServer(s grpc.ServiceRegistrar, srv HTTPOverGRPCServiceServer) {
	s.RegisterService(&HTTPOverGRPCService_ServiceDesc, srv)
}

func _HTTPOverGRPCService_HTTP_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HTTPOverGRPCServiceServer).HTTP(&hTTPOverGRPCServiceHTTPServer{stream})
}

type HTTPOverGRPCService_HTTPServer interface {
	Send(*HTTPResponse) error
	Recv() (*HTTPRequest, error)
	grpc.ServerStream
}

type hTTPOverGRPCServiceHTTPServer struct {
	grpc.ServerStream
}

func (x *hTTPOverGRPCServiceHTTPServer) Send(m *HTTPResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hTTPOverGRPCServiceHTTPServer) Recv() (*HTTPRequest, error) {
	m := new(HTTPRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HTTPOverGRPCService_ServiceDesc is the grpc.ServiceDesc for HTTPOverGRPCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HTTPOverGRPCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.github.jille.httpovergrpc.HTTPOverGRPCService",
	HandlerType: (*HTTPOverGRPCServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HTTP",
			Handler:       _HTTPOverGRPCService_HTTP_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "http.proto",
}
